package sizlib

// (C) Copyright Philip Schlump, 2013-2014

// _ "github.com/mattn/go-oci8"			// OCI

import (
	// _ "../odbc" // _ "code.google.com/p/odbc"
	// _ "github.com/lib/pq"
	// _ "../pq" // _ "github.com/lib/pq"
	// _ "github.com/mattn/go-oci8"			// OCI
	// "database/sql"

	// "github.com/jackc/pgx" //  https://github.com/jackc/pgx

	"encoding/json"
	"errors"
	"image/gif"
	"image/jpeg"
	"image/png"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"regexp"
	"strconv"

	_ "github.com/lib/pq"

	"database/sql"

	"fmt"
	"image"
	//	"encoding/json"
)

// GetImageSizeReadImage read an image  and get the size - save tha tinto the database if it is not already there.
// -------------------------------------------------------------------------------------------------
// Sets mdata["full"] to 'fn'
// Sets mdata["width"] to width
// Sets mdata["height"] to height
// Sets mdata["b_fn"] = mdata["v2"]
// if read_orig - then 'img' is read in from the file system.
//:pgx: func GetImageSizeReadImage(db *pgx.Conn, fn string, img image.Image, mdata map[string]string) (read_orig bool, w int, h int) {
func GetImageSizeReadImage(db *sql.DB, fn string, img image.Image, mdata map[string]string) (read_orig bool, w int, h int) {

	read_orig = false

	w, h, err := GetImageSize(db, fn, mdata) // should pull size info from d.b. on file

	if err != nil {
		img, _ = GetImg(fn)
		read_orig = true

		w, h = GetSizeOfImage(img)
		SaveUpdateImageSize(db, fn, mdata, w, h)
	}
	return
}

// GetImageFromFile Reads in an image and return the size of the image.
// Problem - image is discarded.
func GetImageFromFile(fn string) (w int, h int) {
	img, _ := GetImg(fn)
	w, h = GetSizeOfImage(img)
	return
}

// -------------------------------------------------------------------------------------------------
// xyzzy-test - imlement a command line program and "makefile" test for this.
// xyzzy - check for removal of side effect - or push side effect up to top level - much clearer
// Xyzzy - change internals - replace use of "mdata["full"]" with $1 - clean up code.
// Xyzzy - implement a "Select1Row ( db, Qry, ... )" that returns an interface{},err
// -------------------------------------------------------------------------------------------------
// Query the database to get the size of an image.   Use the full file name.
// Return width, height if found.
// Sets mdata["full"] to 'fn'
// -------------------------------------------------------------------------------------------------
//:pgx: func GetImageSize(db *pgx.Conn, full string, mdata map[string]string) (big_w int, big_h int, err error) {
func GetImageSize(db *sql.DB, full string, mdata map[string]string) (big_w int, big_h int, err error) {
	err = nil
	big_w = 0
	big_h = 0

	mdata["full"] = full // xyzzy - side effect - see if we can remove this!
	if true {
		data := SelData(db, "select \"height\", \"width\", \"file_name\" from \"img_file\" where \"file_name\" = $1", full)
		if len(data) != 1 {
			err = sql.ErrNoRows
		} else {
			big_h = int(data[0]["height"].(int64))
			big_w = int(data[0]["width"].(int64))
		}
	} else {
		q := Qt("select \"height\", \"width\", \"file_name\" from \"img_file\" where \"file_name\" = '%{full%}'", mdata)

		// fmt.Printf ( "****important**** getImageSize: q=->%s<-\n", q )
		Rows, e0 := db.Query(q)
		if e0 != nil {
			err = e0
			fmt.Printf("Error (230) on talking to database, %s\n", err)
			return
		} else {
			defer Rows.Close()
		}

		var x_fn string
		n_row := 0
		for Rows.Next() {
			n_row++
			err = Rows.Scan(&big_h, &big_w, &x_fn)
			if err != nil {
				fmt.Printf("Error (241) on retreiving row from database, %s\n", err)
				return
			}
		}
		err = nil
		if n_row != 1 {
			fmt.Printf("Error (246) too many rows returned, n_rows=%d\n", n_row)
			err = sql.ErrNoRows // Xyzzy log it
		}
		// fmt.Printf ( "****important**** Success - got size from d.b.\n" )
	}
	return
}

// -------------------------------------------------------------------------------------------------
// xyzzy-test
// xyzzy-refactor to use a more standard query interface
// xyzzy- change interface to return H/W in call
// xyzzy- get rid of side effect mdata["width"] and pass in file name, v2
// -------------------------------------------------------------------------------------------------
// Depends on mdata["v2"] being set to base file name
//:pgx:func NextBiggerAvailable(db *pgx.Conn, full string, need_w int, need_h int, mdata map[string]string) (is_avail bool, use_fn string) {
func NextBiggerAvailable(db *sql.DB, full string, need_w int, need_h int, mdata map[string]string) (is_avail bool, use_fn string) {
	is_avail = false
	use_fn = full
	var q string
	mdata["width"] = fmt.Sprintf("%d", need_w)
	mdata["height"] = fmt.Sprintf("%d", need_h)
	if true {
		var data []map[string]interface{}
		var base_file_name = mdata["v2"]
		if need_w > 0 && need_h > 0 {
			data = SelData(db, "select \"height\", \"width\", \"file_name\" from \"img_file\" where \"base_file_name\" = $1 and \"width\" >= $2 and \"height\" >= $3 order by 2 asc limit 1", base_file_name, need_w, need_h)
		} else if need_w == 0 {
			data = SelData(db, "select \"height\", \"width\", \"file_name\" from \"img_file\" where \"base_file_name\" = $1 and \"height\" >= $2 order by 2 asc limit 1", base_file_name, need_h)
		} else if need_h == 0 {
			data = SelData(db, "select \"height\", \"width\", \"file_name\" from \"img_file\" where \"base_file_name\" = $1 and \"width\" >= $2 order by 2 asc limit 1", base_file_name, need_w)
		} // else {
		// 	return
		// }
		if len(data) == 1 {
			use_fn = data[0]["file_name"].(string)
			is_avail = true
		}
	} else {

		if need_w > 0 && need_h > 0 {
			q = Qt("select \"height\", \"width\", \"file_name\" from \"img_file\" where \"base_file_name\" = '%{v2%}' and \"width\" >= %{width%} and \"height\" >= %{height%} order by 2 asc limit 1", mdata)
		} else if need_w == 0 {
			q = Qt("select \"height\", \"width\", \"file_name\" from \"img_file\" where \"base_file_name\" = '%{v2%}' and \"height\" >= %{height%} order by 2 asc limit 1", mdata)
		} else if need_h == 0 {
			q = Qt("select \"height\", \"width\", \"file_name\" from \"img_file\" where \"base_file_name\" = '%{v2%}' and \"width\" >= %{width%} order by 2 asc limit 1", mdata)
		} else {
			return
		}
		// fmt.Printf ( "q=->%s<-\n", q )
		// tr.TraceDb("NextBiggerAvailable", q)

		Rows, err := db.Query(q)
		if err != nil {
			fmt.Printf("error on talking to database, %s\n", err)
			return
		} else {
			defer Rows.Close()
		}

		var x_h int
		var x_w int
		var x_fn string
		n_row := 0
		for Rows.Next() {
			n_row++
			err = Rows.Scan(&x_h, &x_w, &x_fn)
			if err != nil {
				fmt.Printf("Error (111) on retreiving row from database, %s\n", err)
				return
			}
			// tr.TraceDbData("NextBiggerAvailable", q, x_h, x_w, x_fn)
		}
		// tr.TraceDbEnd("NextBiggerAvailable", q, n_row)
		if n_row != 1 {
			fmt.Printf("Error (116) too many rows returned, n_rows=%d\n", n_row)
			is_avail = false
		} else {
			use_fn = x_fn
			is_avail = true
		}
		// fmt.Printf ( "NextBiggerAvailable: use_fn=->%s<- is_avail=%v\n", use_fn, is_avail )
	}
	return
}

// -------------------------------------------------------------------------------------------------
// built_it_already, nb_fn, _, _ := exactMatch ( full, w, 0, mdata )
// xyzzy-test
// xyzzy-refactor to use a more standard query interface
// -------------------------------------------------------------------------------------------------
// Depends on mdata["v2"] being the basename.
// -------------------------------------------------------------------------------------------------
//:pgx:func ExactMatch(db *pgx.Conn, full string, need_w int, need_h int, mdata map[string]string) (is_avail bool, use_fn string, x_w int, x_h int) {
func ExactMatch(db *sql.DB, full string, need_w int, need_h int, mdata map[string]string) (is_avail bool, use_fn string, x_w int, x_h int) {
	is_avail = false
	use_fn = full
	var q string
	mdata["width"] = fmt.Sprintf("%d", need_w)
	mdata["height"] = fmt.Sprintf("%d", need_h)
	// mdata["likebfn"] = "%/" +  mdata["v2"] + ".%"
	if true {
		var data []map[string]interface{}
		var base_file_name = mdata["v2"]
		if need_w > 0 && need_h > 0 {
			data = SelData(db, "select \"height\", \"width\", \"file_name\" from \"img_file\" where \"base_file_name\" = $1 and \"width\" = $2 and \"height\" = $3 order by 2 asc limit 1", base_file_name, need_w, need_h)
		} else if need_w == 0 {
			data = SelData(db, "select \"height\", \"width\", \"file_name\" from \"img_file\" where \"base_file_name\" = $1 and \"height\" = $2 order by 2 asc limit 1", base_file_name, need_h)
		} else if need_h == 0 {
			data = SelData(db, "select \"height\", \"width\", \"file_name\" from \"img_file\" where \"base_file_name\" = $1 and \"width\" = $2 order by 2 asc limit 1", base_file_name, need_w)
		} // else {
		// 	return
		// }
		if len(data) == 1 {
			use_fn = data[0]["file_name"].(string)
			x_w = int(data[0]["width"].(int64))
			x_h = int(data[0]["height"].(int64))
			is_avail = true
		}
	} else {

		if need_w > 0 && need_h > 0 {
			q = Qt("select \"height\", \"width\", \"file_name\" from \"img_file\" where \"width\" = %{width%} and \"height\" = %{height%} and \"base_file_name\" = '%{v2%}' order by 2 asc limit 1", mdata)
		} else if need_w == 0 {
			q = Qt("select \"height\", \"width\", \"file_name\" from \"img_file\" where \"height\" = %{height%} and \"base_file_name\" = '%{v2%}' order by 2 asc limit 1", mdata)
		} else if need_h == 0 {
			q = Qt("select \"height\", \"width\", \"file_name\" from \"img_file\" where \"width\" = %{width%} and \"base_file_name\" = '%{v2%}' order by 2 asc limit 1", mdata)
		} else {
			return
		}
		// fmt.Printf ( "exactMatch: q=->%s<-\n", q )

		Rows, err := db.Query(q)
		if err != nil {
			fmt.Printf("Error (150) on talking to database, %s\n", err)
			return
		} else {
			defer Rows.Close()
		}

		var x_fn string
		n_row := 0
		for Rows.Next() {
			//  fmt.Printf ("Inside Rows Next\n" );
			n_row++
			err = Rows.Scan(&x_h, &x_w, &x_fn)
			if err != nil {
				fmt.Printf("Error (162) on retreiving row from database, %s\n", err)
				return
			}
		}
		if n_row == 0 {
			fmt.Printf("Error (166) NO rows returned, query=%s\n", q)
			use_fn = ""
			is_avail = false
			return
		}
		if n_row != 1 {
			fmt.Printf("Error (167) too many rows returned, n_rows=%d\n", n_row)
		}

		use_fn = x_fn
		// fmt.Printf ( "      use_fn=->%s<- with size %d,%d\n", use_fn, x_w, x_h )
		is_avail = true
	}

	return
}

// -------------------------------------------------------------------------------------------------
// -------------------------------------------------------------------------------------------------
func DeleteImgSetId(mdata map[string]string) {
	key := "img_set_id/" + mdata["r0"] + "/" + mdata["g0"] + "/" + mdata["u0"]
	_, ok := mdata[key]
	if ok {
		delete(mdata, key)
	}
}

// -------------------------------------------------------------------------------------------------
// -------------------------------------------------------------------------------------------------
//:pgx:func GetImgSetId(db *pgx.Conn, mdata map[string]string) (string, bool) {
func GetImgSetId(db *sql.DB, mdata map[string]string) (string, bool) {
	/* done - need user_id(security) and other info on this select */
	// mdata["u0"] = opts.UserID
	// mdata["g0"] = opts.Group
	// mdata["r0"] = opts.ImgSet
	key := "img_set_id/" + mdata["r0"] + "/" + mdata["g0"] + "/" + mdata["u0"]
	t, ok := mdata[key]
	if ok {
		return t, true
	}
	img_set_id_row := SelData(db, `
		select t1."id" 
		from "img_set" as t1, "img_group" as t2, "img_user_group" as t3, "img_user" as t4
		where t1."img_set_dir" = $1 
		  and t2."group_dir" = $2
		  and t2."id" = t1."group_id"
		  and t4."user_dir" = $3
		  and t3."user_id" = t4."user_id"
		  and t3."group_id" = t2."id"
		`, mdata["r0"], mdata["g0"], mdata["u0"])
	if len(img_set_id_row) > 0 {
		img_set_id := img_set_id_row[0]["id"].(string)
		mdata[key] = img_set_id
		return img_set_id_row[0]["id"].(string), true
	} else {
		return "", false
	}
}

// -------------------------------------------------------------------------------------------------
// AddAMissingFile ( db, Qt("%{dir%}/%{pth%}/%{v3%}", mdata )
// -------------------------------------------------------------------------------------------------
//:pgx:func AddAMissingFile(db *pgx.Conn, full string, mdata map[string]string, status string) {
func AddAMissingFile(db *sql.DB, full string, mdata map[string]string, status string) {
	mdata["v2"] = full
	img_set_id, found := GetImgSetId(db, mdata)
	if !found {
		return
	}

	base_file_name := RmExt(full) // Strip the extension from the file name

	width, height := GetImageFromFile(full)

	_, fi := ExistsGetUDate(full)
	mdata["xx"] = fi.ModTime().Format("2006-01-02 15:04:05.999999999")

	mdata["img_set_id"] = img_set_id

	// xyzzy - .jpg below

	Run1(db, `insert into "img_file" (
			  "file_name"
			, "img_set_id"
			, "ext"
			, "width"
			, "height"
			, "base_file_name"
			, "upload_time"
			, "status"
			, "img_seq"
			, "n_acc"
			, "user_dir"
			, "group_dir"
			, "img_set_dir"
		) values ( 
			  $1		
			, $2	
			, '.jpg'
			, $3
			, $4 		
			, $5	
			, $6
			, $7		
			, 999999999
			, 0		
			, $8
			, $9		
			, $10	
		)`,
		full,           /* 1 */
		img_set_id,     /* 2 */
		width,          /* 3 */
		height,         /* 4 */
		base_file_name, /* 5 */
		mdata["xx"],    /* 6 */
		status,         /* 7 */
		mdata["u0"],    /* 8 */
		mdata["g0"],    /* 9 */
		mdata["r0"])    /* 10 */
}

// -------------------------------------------------------------------------------------------------
// xyzzy-Rewrite
// -------------------------------------------------------------------------------------------------
//:pgx:func HaveFileAlready(db *pgx.Conn, full string, mdata map[string]string) (got_it bool) {
func HaveFileAlready(db *sql.DB, full string, mdata map[string]string) (got_it bool) {
	got_it = false
	var q string
	mdata["v2"] = full
	q = Qt("select true as \"found\" from \"img_file\" where \"file_name\" = '%{v2%}' limit 1", mdata)

	Rows, err := db.Query(q)
	if err != nil {
		fmt.Printf("Error (150) on talking to database, %s\n", err)
		return
	} else {
		defer Rows.Close()
	}

	var x_junk bool
	n_row := 0
	for Rows.Next() {
		n_row++
		err = Rows.Scan(&x_junk)
		if err != nil {
			fmt.Printf("Error (162) on retreiving row from database, %s\n", err)
			return
		}
	}
	if n_row == 0 {
		fmt.Printf("Error (166) NO rows returned, query=%s\n", q)
		return
	}
	got_it = true
	return
}

// -------------------------------------------------------------------------------------------------
// Depends on base file name being in mdata["v2"], "u0", "g0", "r0"
// Sets:
//	mdata["width"] to width
//	mdata["height"] to height
//	mdata["full"] file name it is working on
//	mdata["b_fn"] to the basename of the file
// -------------------------------------------------------------------------------------------------
//:pgx:func SaveUpdateImageSize(db *pgx.Conn, full string, mdata map[string]string, width int, height int) {
func SaveUpdateImageSize(db *sql.DB, full string, mdata map[string]string, width int, height int) {
	mdata["width"] = fmt.Sprintf("%d", width)
	mdata["height"] = fmt.Sprintf("%d", height)
	mdata["full"] = full
	mdata["b_fn"] = Basename(RmExt(mdata["v2"]))
	fmt.Printf("SaveUpdateImgSize: base-file-name=%s\n", mdata["b_fn"])
	InsUpd(db, "insert into \"img_file\" ( \"file_name\", \"width\", \"height\", \"base_file_name\", \"img_set_id\", \"user_dir\", \"group_dir\", \"img_set_dir\" ) values ( '%{full%}', %{width%}, %{height%}, '%{b_fn%}', '%{set_id%}', '%{u0%}', '%{g0%}', '%{r0%}' )",
		"update \"img_file\" set \"width\" = %{width%}, \"height\" = %{height%}, \"base_file_name\" = '%{b_fn%}', \"img_set_id\" = '%{set_id%}', \"user_dir\" = '%{u0%}', \"group_dir\" = '%{g0%}', \"img_set_dir\" = '%{r0%}' where \"file_name\" = '%{full%}'", mdata)
}

// -------------------------------------------------------------------------------------------------
// SaveUpdateImageCss ( db, thumb46x, mdata, Qt ( "height:45px;width:%{th46x_wM1%}px;
// background:url('%{img_prefix%}%{img_path%}/thumb-all.x46.jpg?rnd=%{rnd%}') no-repeat -%{tx46x_P1%}px 0px;", mdata ) )
// -------------------------------------------------------------------------------------------------
//:pgx:func SaveUpdateImageCss(db *pgx.Conn, full string, mdata map[string]string, s string) {
func SaveUpdateImageCss(db *sql.DB, full string, mdata map[string]string, s string) {
	// mdata["bn_raw"] = RmExt(v2)							// base name raw for fiel name in URL		-- Xyzzy82
	mdata["cssString"] = s
	mdata["full"] = full
	upd := `update "img_file" set "cssClass" = $1 where "file_name" = $2 or ( "height" = 46 and "base_file_name" = $3 )`
	fmt.Printf("     SaveUpdateImageCSS: %s, [ %s, %s, %s ]\n", upd, full, s, mdata["bn_raw"])
	err := Run1(db, upd, s, full, mdata["bn_raw"])
	if err != nil {
		fmt.Printf("Error (350) in insUpd = %s\n", err)
	}
}

// -------------------------------------------------------------------------------------------------
// -------------------------------------------------------------------------------------------------
func PutSize(fn string, th image.Image) { // Output Size on Image
	out, err := os.Create(fn)
	if err != nil {
		log.Fatal(err)
	}
	defer out.Close()

	w, h := GetSizeOfImage(th)

	fmt.Fprintf(out, "{\n\"height\": %d\n,\"width\": %d\n}\n", h, w)
}

// -------------------------------------------------------------------------------------------------
// -------------------------------------------------------------------------------------------------
func PutSizeWH(fn string, w int, h int) { // Output Size on Image
	out, err := os.Create(fn)
	if err != nil {
		log.Fatal(err)
	}
	defer out.Close()

	fmt.Fprintf(out, "{\n\"height\": %d\n,\"width\": %d\n}\n", h, w)
}

// -------------------------------------------------------------------------------------------------
// -------------------------------------------------------------------------------------------------
type infoOnFile struct {
	Height int
	Width  int
}

// -------------------------------------------------------------------------------------------------
// _, _ = getSize ( genFnImg ( "%s/%s_cache/%s.x100.info", dir, pth, v2 ) )
// -------------------------------------------------------------------------------------------------
func GetSize(fn string) (int, int) {
	file, err := ioutil.ReadFile(fn)
	if err != nil {
		fmt.Printf("File error: %v\n", err)
	}

	var ii infoOnFile

	json.Unmarshal(file, &ii)

	return ii.Width, ii.Height
}

// -------------------------------------------------------------------------------------------------
// xyzzy - im.
// WxH on image file
// -------------------------------------------------------------------------------------------------
func GetSizeOfImage(img image.Image) (w, h int) {
	r := img.Bounds()
	h = r.Dy()
	w = r.Dx()
	// fmt.Fprintf(os.Stdout, "w=%d h=%d\n", w, h)
	return
}

// -------------------------------------------------------------------------------------------------
// xyzzy - im.
// parse size 0000x9999 return 0000, hash 0000, 9999 has 9999
// -------------------------------------------------------------------------------------------------
func ParseSize(siz string) (int, int) {
	var re = regexp.MustCompile("([0-9]*)x([0-9]*)")
	x := re.FindAllStringSubmatch(siz, -1)
	sw := x[0][1]
	w, err := strconv.Atoi(sw)
	if err != nil {
		w = 0
	}
	sh := x[0][2]
	h, err := strconv.Atoi(sh)
	if err != nil {
		h = 0
	}
	return w, h
}

// -------------------------------------------------------------------------------------------------
// xyzzy - im.
// read image file - handles .jpg, .jpeg, .gif, .png
// -------------------------------------------------------------------------------------------------
func GetImg(fn string) (img image.Image, err error) {
	typ := filepath.Ext(fn)
	file, err := os.Open(fn)
	defer file.Close()
	if err != nil {
		log.Fatal(err)
		return
	}

	// var img image.Image
	// fmt.Printf ( "typ=[%s]\n", typ );
	if typ == ".jpg" || typ == ".jpeg" {
		img, err = jpeg.Decode(file)
	} else if typ == ".gif" {
		img, err = gif.Decode(file)
	} else if typ == ".png" {
		img, err = png.Decode(file)
	} else {
		err = errors.New("Invalid file type")
	}
	if err != nil {
		log.Fatal(err)
		return
	}
	err = nil
	return
}

// -------------------------------------------------------------------------------------------------
// xyzzy - im.
// -------------------------------------------------------------------------------------------------
func GetImg2(base string, fn string) (img image.Image, err error) {
	return GetImg(base + "/" + fn)
}

// -------------------------------------------------------------------------------------------------
// xyzzy - im.
// -------------------------------------------------------------------------------------------------
// output image file in jpg with XX quality
func PutImg(fn string, img image.Image, quality int) {

	out, err := os.Create(fn)
	if err != nil {
		log.Fatal(err)
	}
	defer out.Close()

	var o jpeg.Options
	o.Quality = quality

	jpeg.Encode(out, img, &o) // write new image to file
}

// -------------------------------------------------------------------------------------------------
// xyzzy - im.
// -------------------------------------------------------------------------------------------------
func PutImg2(base string, fn string, img image.Image, quality int) {
	PutImg(base+"/"+fn, img, quality)
}

// -------------------------------------------------------------------------------------------------
// xyzzy - fil.
// Replace with ioutil.WriteFile
//func PutString(fn string, s string) {
//
//	out, err := os.Create(fn)
//	if err != nil {
//		log.Fatal(err)
//	}
//	defer out.Close()
//
//	fmt.Fprintf(out, "%s", s)
//}

// -------------------------------------------------------------------------------------------------
// xyzzy - im.
// resize image to
// -------------------------------------------------------------------------------------------------
//func ResizeImage(img image.Image, new_w int, new_h int) (m image.Image) {
//	m = resize.Resize(uint(new_w), uint(new_h), img, resize.Bicubic)
//	return
//}

// -------------------------------------------------------------------------------------------------
// This could be more effecient - may do 2 resize operations to get inside max_w, max_h
// -------------------------------------------------------------------------------------------------
//func ResizeImg2(img image.Image, max_w int, max_h int) (m image.Image, cur_w int, cur_h int) {
//	m = ResizeImage(img, 0, max_h)
//	cur_w, cur_h = GetSizeOfImage(m)
//	if cur_w > max_w {
//		m = ResizeImage(img, max_w, 0)
//		cur_w, cur_h = GetSizeOfImage(m)
//	}
//	return
//}
